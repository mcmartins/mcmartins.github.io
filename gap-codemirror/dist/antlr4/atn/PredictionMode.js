/* gap-lint v1.0.0, Manuel Martins - Generated on 26-10-2016 */
function PredictionMode(){return this}var Set=require("./../Utils").Set,BitSet=require("./../Utils").BitSet,AltDict=require("./../Utils").AltDict,ATN=require("./ATN").ATN,RuleStopState=require("./ATNState").RuleStopState,ATNConfigSet=require("./ATNConfigSet").ATNConfigSet,ATNConfig=require("./ATNConfig").ATNConfig,SemanticContext=require("./SemanticContext").SemanticContext;PredictionMode.SLL=0,PredictionMode.LL=1,PredictionMode.LL_EXACT_AMBIG_DETECTION=2,PredictionMode.hasSLLConflictTerminatingPrediction=function(mode,configs){if(PredictionMode.allConfigsInRuleStopStates(configs))return!0;if(mode===PredictionMode.SLL&&configs.hasSemanticContext){for(var dup=new ATNConfigSet,i=0;i<configs.items.length;i++){var c=configs.items[i];c=new ATNConfig({semanticContext:SemanticContext.NONE},c),dup.add(c)}configs=dup}var altsets=PredictionMode.getConflictingAltSubsets(configs);return PredictionMode.hasConflictingAltSet(altsets)&&!PredictionMode.hasStateAssociatedWithOneAlt(configs)},PredictionMode.hasConfigInRuleStopState=function(configs){for(var i=0;i<configs.items.length;i++){var c=configs.items[i];if(c.state instanceof RuleStopState)return!0}return!1},PredictionMode.allConfigsInRuleStopStates=function(configs){for(var i=0;i<configs.items.length;i++){var c=configs.items[i];if(!(c.state instanceof RuleStopState))return!1}return!0},PredictionMode.resolvesToJustOneViableAlt=function(altsets){return PredictionMode.getSingleViableAlt(altsets)},PredictionMode.allSubsetsConflict=function(altsets){return!PredictionMode.hasNonConflictingAltSet(altsets)},PredictionMode.hasNonConflictingAltSet=function(altsets){for(var i=0;i<altsets.length;i++){var alts=altsets[i];if(1===alts.length)return!0}return!1},PredictionMode.hasConflictingAltSet=function(altsets){for(var i=0;i<altsets.length;i++){var alts=altsets[i];if(alts.length>1)return!0}return!1},PredictionMode.allSubsetsEqual=function(altsets){for(var first=null,i=0;i<altsets.length;i++){var alts=altsets[i];if(null===first)first=alts;else if(alts!==first)return!1}return!0},PredictionMode.getUniqueAlt=function(altsets){var all=PredictionMode.getAlts(altsets);return 1===all.length?all.minValue():ATN.INVALID_ALT_NUMBER},PredictionMode.getAlts=function(altsets){var all=new BitSet;return altsets.map(function(alts){all.or(alts)}),all},PredictionMode.getConflictingAltSubsets=function(configs){for(var configToAlts={},i=0;i<configs.items.length;i++){var c=configs.items[i],key="key_"+c.state.stateNumber+"/"+c.context,alts=configToAlts[key]||null;null===alts&&(alts=new BitSet,configToAlts[key]=alts),alts.add(c.alt)}var values=[];for(var k in configToAlts)0===k.indexOf("key_")&&values.push(configToAlts[k]);return values},PredictionMode.getStateToAltMap=function(configs){var m=new AltDict;return configs.items.map(function(c){var alts=m.get(c.state);null===alts&&(alts=new BitSet,m.put(c.state,alts)),alts.add(c.alt)}),m},PredictionMode.hasStateAssociatedWithOneAlt=function(configs){for(var values=PredictionMode.getStateToAltMap(configs).values(),i=0;i<values.length;i++)if(1===values[i].length)return!0;return!1},PredictionMode.getSingleViableAlt=function(altsets){for(var result=null,i=0;i<altsets.length;i++){var alts=altsets[i],minAlt=alts.minValue();if(null===result)result=minAlt;else if(result!==minAlt)return ATN.INVALID_ALT_NUMBER}return result},exports.PredictionMode=PredictionMode;