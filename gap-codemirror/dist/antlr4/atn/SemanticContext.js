/* gap-lint v1.0.0, Manuel Martins - Generated on 26-10-2016 */
function SemanticContext(){return this}function Predicate(ruleIndex,predIndex,isCtxDependent){return SemanticContext.call(this),this.ruleIndex=void 0===ruleIndex?-1:ruleIndex,this.predIndex=void 0===predIndex?-1:predIndex,this.isCtxDependent=void 0!==isCtxDependent&&isCtxDependent,this}function PrecedencePredicate(precedence){SemanticContext.call(this),this.precedence=void 0===precedence?0:precedence}function AND(a,b){SemanticContext.call(this);var operands=new Set;a instanceof AND?a.opnds.map(function(o){operands.add(o)}):operands.add(a),b instanceof AND?b.opnds.map(function(o){operands.add(o)}):operands.add(b);var precedencePredicates=PrecedencePredicate.filterPrecedencePredicates(operands);if(precedencePredicates.length>0){var reduced=null;precedencePredicates.map(function(p){(null===reduced||p.precedence<reduced.precedence)&&(reduced=p)}),operands.add(reduced)}return this.opnds=operands.values(),this}function OR(a,b){SemanticContext.call(this);var operands=new Set;a instanceof OR?a.opnds.map(function(o){operands.add(o)}):operands.add(a),b instanceof OR?b.opnds.map(function(o){operands.add(o)}):operands.add(b);var precedencePredicates=PrecedencePredicate.filterPrecedencePredicates(operands);if(precedencePredicates.length>0){var s=precedencePredicates.sort(function(a,b){return a.compareTo(b)}),reduced=s[s.length-1];operands.add(reduced)}return this.opnds=operands.values(),this}var Set=require("./../Utils").Set;SemanticContext.prototype.evaluate=function(parser,outerContext){},SemanticContext.prototype.evalPrecedence=function(parser,outerContext){return this},SemanticContext.andContext=function(a,b){if(null===a||a===SemanticContext.NONE)return b;if(null===b||b===SemanticContext.NONE)return a;var result=new AND(a,b);return 1===result.opnds.length?result.opnds[0]:result},SemanticContext.orContext=function(a,b){if(null===a)return b;if(null===b)return a;if(a===SemanticContext.NONE||b===SemanticContext.NONE)return SemanticContext.NONE;var result=new OR(a,b);return 1===result.opnds.length?result.opnds[0]:result},Predicate.prototype=Object.create(SemanticContext.prototype),Predicate.prototype.constructor=Predicate,SemanticContext.NONE=new Predicate,Predicate.prototype.evaluate=function(parser,outerContext){var localctx=this.isCtxDependent?outerContext:null;return parser.sempred(localctx,this.ruleIndex,this.predIndex)},Predicate.prototype.hashString=function(){return""+this.ruleIndex+"/"+this.predIndex+"/"+this.isCtxDependent},Predicate.prototype.equals=function(other){return this===other||other instanceof Predicate&&(this.ruleIndex===other.ruleIndex&&this.predIndex===other.predIndex&&this.isCtxDependent===other.isCtxDependent)},Predicate.prototype.toString=function(){return"{"+this.ruleIndex+":"+this.predIndex+"}?"},PrecedencePredicate.prototype=Object.create(SemanticContext.prototype),PrecedencePredicate.prototype.constructor=PrecedencePredicate,PrecedencePredicate.prototype.evaluate=function(parser,outerContext){return parser.precpred(outerContext,this.precedence)},PrecedencePredicate.prototype.evalPrecedence=function(parser,outerContext){return parser.precpred(outerContext,this.precedence)?SemanticContext.NONE:null},PrecedencePredicate.prototype.compareTo=function(other){return this.precedence-other.precedence},PrecedencePredicate.prototype.hashString=function(){return"31"},PrecedencePredicate.prototype.equals=function(other){return this===other||other instanceof PrecedencePredicate&&this.precedence===other.precedence},PrecedencePredicate.prototype.toString=function(){return"{"+this.precedence+">=prec}?"},PrecedencePredicate.filterPrecedencePredicates=function(set){var result=[];return set.values().map(function(context){context instanceof PrecedencePredicate&&result.push(context)}),result},AND.prototype=Object.create(SemanticContext.prototype),AND.prototype.constructor=AND,AND.prototype.equals=function(other){return this===other||other instanceof AND&&this.opnds===other.opnds},AND.prototype.hashString=function(){return""+this.opnds+"/AND"},AND.prototype.evaluate=function(parser,outerContext){for(var i=0;i<this.opnds.length;i++)if(!this.opnds[i].evaluate(parser,outerContext))return!1;return!0},AND.prototype.evalPrecedence=function(parser,outerContext){for(var differs=!1,operands=[],i=0;i<this.opnds.length;i++){var context=this.opnds[i],evaluated=context.evalPrecedence(parser,outerContext);if(differs|=evaluated!==context,null===evaluated)return null;evaluated!==SemanticContext.NONE&&operands.push(evaluated)}if(!differs)return this;if(0===operands.length)return SemanticContext.NONE;var result=null;return operands.map(function(o){result=null===result?o:SemanticContext.andContext(result,o)}),result},AND.prototype.toString=function(){var s="";return this.opnds.map(function(o){s+="&& "+o.toString()}),s.length>3?s.slice(3):s},OR.prototype=Object.create(SemanticContext.prototype),OR.prototype.constructor=OR,OR.prototype.constructor=function(other){return this===other||other instanceof OR&&this.opnds===other.opnds},OR.prototype.hashString=function(){return""+this.opnds+"/OR"},OR.prototype.evaluate=function(parser,outerContext){for(var i=0;i<this.opnds.length;i++)if(this.opnds[i].evaluate(parser,outerContext))return!0;return!1},OR.prototype.evalPrecedence=function(parser,outerContext){for(var differs=!1,operands=[],i=0;i<this.opnds.length;i++){var context=this.opnds[i],evaluated=context.evalPrecedence(parser,outerContext);if(differs|=evaluated!==context,evaluated===SemanticContext.NONE)return SemanticContext.NONE;null!==evaluated&&operands.push(evaluated)}if(!differs)return this;if(0===operands.length)return null;var result=null;return operands.map(function(o){return null===result?o:SemanticContext.orContext(result,o)}),result},OR.prototype.toString=function(){var s="";return this.opnds.map(function(o){s+="|| "+o.toString()}),s.length>3?s.slice(3):s},exports.SemanticContext=SemanticContext,exports.PrecedencePredicate=PrecedencePredicate,exports.Predicate=Predicate;