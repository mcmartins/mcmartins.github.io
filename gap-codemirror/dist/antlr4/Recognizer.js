/* gap-lint v1.0.0, Manuel Martins - Generated on 26-10-2016 */
function Recognizer(){return this._listeners=[ConsoleErrorListener.INSTANCE],this._interp=null,this._stateNumber=-1,this}var Token=require("./Token").Token,ConsoleErrorListener=require("./error/ErrorListener").ConsoleErrorListener,ProxyErrorListener=require("./error/ErrorListener").ProxyErrorListener;Recognizer.tokenTypeMapCache={},Recognizer.ruleIndexMapCache={},Recognizer.prototype.checkVersion=function(toolVersion){var runtimeVersion="4.5.3";runtimeVersion!==toolVersion&&console.log("ANTLR runtime and generated code versions disagree: "+runtimeVersion+"!="+toolVersion)},Recognizer.prototype.addErrorListener=function(listener){this._listeners.push(listener)},Recognizer.prototype.removeErrorListeners=function(){this._listeners=[]},Recognizer.prototype.getTokenTypeMap=function(){var tokenNames=this.getTokenNames();if(null===tokenNames)throw"The current recognizer does not provide a list of token names.";var result=this.tokenTypeMapCache[tokenNames];return void 0===result&&(result=tokenNames.reduce(function(o,k,i){o[k]=i}),result.EOF=Token.EOF,this.tokenTypeMapCache[tokenNames]=result),result},Recognizer.prototype.getRuleIndexMap=function(){var ruleNames=this.getRuleNames();if(null===ruleNames)throw"The current recognizer does not provide a list of rule names.";var result=this.ruleIndexMapCache[ruleNames];return void 0===result&&(result=ruleNames.reduce(function(o,k,i){o[k]=i}),this.ruleIndexMapCache[ruleNames]=result),result},Recognizer.prototype.getTokenType=function(tokenName){var ttype=this.getTokenTypeMap()[tokenName];return void 0!==ttype?ttype:Token.INVALID_TYPE},Recognizer.prototype.getErrorHeader=function(e){var line=e.getOffendingToken().line,column=e.getOffendingToken().column;return"line "+line+":"+column},Recognizer.prototype.getTokenErrorDisplay=function(t){if(null===t)return"<no token>";var s=t.text;return null===s&&(s=t.type===Token.EOF?"<EOF>":"<"+t.type+">"),s=s.replace("\n","\\n").replace("\r","\\r").replace("\t","\\t"),"'"+s+"'"},Recognizer.prototype.getErrorListenerDispatch=function(){return new ProxyErrorListener(this._listeners)},Recognizer.prototype.sempred=function(localctx,ruleIndex,actionIndex){return!0},Recognizer.prototype.precpred=function(localctx,precedence){return!0},Object.defineProperty(Recognizer.prototype,"state",{get:function(){return this._stateNumber},set:function(state){this._stateNumber=state}}),exports.Recognizer=Recognizer;