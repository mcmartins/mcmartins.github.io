/* gap-lint v1.0.0, Manuel Martins - Generated on 26-10-2016 */
function Tree(){return this}function SyntaxTree(){return Tree.call(this),this}function ParseTree(){return SyntaxTree.call(this),this}function RuleNode(){return ParseTree.call(this),this}function TerminalNode(){return ParseTree.call(this),this}function ErrorNode(){return TerminalNode.call(this),this}function ParseTreeVisitor(){return this}function ParseTreeListener(){return this}function TerminalNodeImpl(symbol){return TerminalNode.call(this),this.parentCtx=null,this.symbol=symbol,this}function ErrorNodeImpl(token){return TerminalNodeImpl.call(this,token),this}function ParseTreeWalker(){return this}var Token=require("./../Token").Token,Interval=require("./../IntervalSet").Interval,INVALID_INTERVAL=new Interval(-1,-2),Utils=require("../Utils.js");SyntaxTree.prototype=Object.create(Tree.prototype),SyntaxTree.prototype.constructor=SyntaxTree,ParseTree.prototype=Object.create(SyntaxTree.prototype),ParseTree.prototype.constructor=ParseTree,RuleNode.prototype=Object.create(ParseTree.prototype),RuleNode.prototype.constructor=RuleNode,TerminalNode.prototype=Object.create(ParseTree.prototype),TerminalNode.prototype.constructor=TerminalNode,ErrorNode.prototype=Object.create(TerminalNode.prototype),ErrorNode.prototype.constructor=ErrorNode,ParseTreeVisitor.prototype.visit=function(ctx){if(Utils.isArray(ctx)){var self=this;return ctx.map(function(child){return visitAtom(self,child)})}return visitAtom(this,ctx)},ParseTreeVisitor.prototype.visitTerminal=function(node){},ParseTreeVisitor.prototype.visitErrorNode=function(node){};var visitAtom=function(visitor,ctx){if(void 0!==ctx.parser){var name=ctx.parser.ruleNames[ctx.ruleIndex],funcName="visit"+Utils.titleCase(name);return visitor[funcName](ctx)}};ParseTreeListener.prototype.visitTerminal=function(node){},ParseTreeListener.prototype.visitErrorNode=function(node){},ParseTreeListener.prototype.enterEveryRule=function(node){},ParseTreeListener.prototype.exitEveryRule=function(node){},TerminalNodeImpl.prototype=Object.create(TerminalNode.prototype),TerminalNodeImpl.prototype.constructor=TerminalNodeImpl,TerminalNodeImpl.prototype.getChild=function(i){return null},TerminalNodeImpl.prototype.getSymbol=function(){return this.symbol},TerminalNodeImpl.prototype.getParent=function(){return this.parentCtx},TerminalNodeImpl.prototype.getPayload=function(){return this.symbol},TerminalNodeImpl.prototype.getSourceInterval=function(){if(null===this.symbol)return INVALID_INTERVAL;var tokenIndex=this.symbol.tokenIndex;return new Interval(tokenIndex,tokenIndex)},TerminalNodeImpl.prototype.getChildCount=function(){return 0},TerminalNodeImpl.prototype.accept=function(visitor){return visitor.visitTerminal(this)},TerminalNodeImpl.prototype.getText=function(){return this.symbol.text},TerminalNodeImpl.prototype.toString=function(){return this.symbol.type===Token.EOF?"<EOF>":this.symbol.text},ErrorNodeImpl.prototype=Object.create(TerminalNodeImpl.prototype),ErrorNodeImpl.prototype.constructor=ErrorNodeImpl,ErrorNodeImpl.prototype.isErrorNode=function(){return!0},ErrorNodeImpl.prototype.accept=function(visitor){return visitor.visitErrorNode(this)},ParseTreeWalker.prototype.walk=function(listener,t){var errorNode=t instanceof ErrorNode||void 0!==t.isErrorNode&&t.isErrorNode();if(errorNode)listener.visitErrorNode(t);else if(t instanceof TerminalNode)listener.visitTerminal(t);else{this.enterRule(listener,t);for(var i=0;i<t.getChildCount();i++){var child=t.getChild(i);this.walk(listener,child)}this.exitRule(listener,t)}},ParseTreeWalker.prototype.enterRule=function(listener,r){var ctx=r.getRuleContext();listener.enterEveryRule(ctx),ctx.enterRule(listener)},ParseTreeWalker.prototype.exitRule=function(listener,r){var ctx=r.getRuleContext();ctx.exitRule(listener),listener.exitEveryRule(ctx)},ParseTreeWalker.DEFAULT=new ParseTreeWalker,exports.RuleNode=RuleNode,exports.ErrorNode=ErrorNode,exports.TerminalNode=TerminalNode,exports.ErrorNodeImpl=ErrorNodeImpl,exports.TerminalNodeImpl=TerminalNodeImpl,exports.ParseTreeListener=ParseTreeListener,exports.ParseTreeVisitor=ParseTreeVisitor,exports.ParseTreeWalker=ParseTreeWalker,exports.INVALID_INTERVAL=INVALID_INTERVAL;