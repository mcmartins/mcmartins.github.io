/* gap-lint v1.0.0, Manuel Martins - Generated on 26-10-2016 */
function Trees(){}var Utils=require("./../Utils"),Token=require("./../Token").Token,RuleNode=require("./Tree").RuleNode,ErrorNode=require("./Tree").ErrorNode,TerminalNode=require("./Tree").TerminalNode,ParserRuleContext=require("./../ParserRuleContext").ParserRuleContext,RuleContext=require("./../RuleContext").RuleContext,INVALID_ALT_NUMBER=require("./../atn/ATN").INVALID_ALT_NUMBER;Trees.toStringTree=function(tree,ruleNames,recog){ruleNames=ruleNames||null,recog=recog||null,null!==recog&&(ruleNames=recog.ruleNames);var s=Trees.getNodeText(tree,ruleNames);s=Utils.escapeWhitespace(s,!1);var c=tree.getChildCount();if(0===c)return s;var res="("+s+" ";c>0&&(s=Trees.toStringTree(tree.getChild(0),ruleNames),res=res.concat(s));for(var i=1;i<c;i++)s=Trees.toStringTree(tree.getChild(i),ruleNames),res=res.concat(" "+s);return res=res.concat(")")},Trees.getNodeText=function(t,ruleNames,recog){if(ruleNames=ruleNames||null,recog=recog||null,null!==recog&&(ruleNames=recog.ruleNames),null!==ruleNames){if(t instanceof RuleContext){var altNumber=t.getAltNumber();return altNumber!=INVALID_ALT_NUMBER?ruleNames[t.ruleIndex]+":"+altNumber:ruleNames[t.ruleIndex]}if(t instanceof ErrorNode)return t.toString();if(t instanceof TerminalNode&&null!==t.symbol)return t.symbol.text}var payload=t.getPayload();return payload instanceof Token?payload.text:t.getPayload().toString()},Trees.getChildren=function(t){for(var list=[],i=0;i<t.getChildCount();i++)list.push(t.getChild(i));return list},Trees.getAncestors=function(t){var ancestors=[];for(t=t.getParent();null!==t;)ancestors=[t].concat(ancestors),t=t.getParent();return ancestors},Trees.findAllTokenNodes=function(t,ttype){return Trees.findAllNodes(t,ttype,!0)},Trees.findAllRuleNodes=function(t,ruleIndex){return Trees.findAllNodes(t,ruleIndex,!1)},Trees.findAllNodes=function(t,index,findTokens){var nodes=[];return Trees._findAllNodes(t,index,findTokens,nodes),nodes},Trees._findAllNodes=function(t,index,findTokens,nodes){findTokens&&t instanceof TerminalNode?t.symbol.type===index&&nodes.push(t):!findTokens&&t instanceof ParserRuleContext&&t.ruleIndex===index&&nodes.push(t);for(var i=0;i<t.getChildCount();i++)Trees._findAllNodes(t.getChild(i),index,findTokens,nodes)},Trees.descendants=function(t){for(var nodes=[t],i=0;i<t.getChildCount();i++)nodes=nodes.concat(Trees.descendants(t.getChild(i)));return nodes},exports.Trees=Trees;